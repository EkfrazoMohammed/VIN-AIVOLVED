{"version":3,"file":"static/js/320.b1f89bf0.chunk.js","mappings":"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","sources":["components/Dashboard/RealTimeManufacturingSection.jsx","../node_modules/react-chartjs-2/src/utils.ts","../node_modules/react-chartjs-2/src/chart.tsx","../node_modules/react-chartjs-2/src/typedCharts.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Bar } from \"react-chartjs-2\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { setSelectedMachineDpmu } from \"../../redux/slices/machineSlice\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Spin ,ConfigProvider } from \"antd\";\r\n\r\nexport default function RealTimeManufacturingSection({\r\n  loading: externalLoading,\r\n  categoryDefects,\r\n  productionData,\r\n}) {\r\n  const dispatch = useDispatch();\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    const timeout = setTimeout(() => {\r\n      setIsLoading(false);\r\n    }, 4000); \r\n   return () => clearTimeout(timeout);\r\n  }, [productionData]);\r\n\r\n  \r\n\r\n\r\n  // Helper to calculate total defects\r\n  const totalDefects = Object.values(categoryDefects || {}).reduce(\r\n    (total, count) => total + count,\r\n    0\r\n  );\r\n\r\n  // Chart Data\r\n  const data = {\r\n    labels: productionData?.map((item) => item.date_time),\r\n    datasets: [\r\n      {\r\n        label: \"Defect Percentage\",\r\n        data: productionData?.map((item) =>\r\n          parseInt(item.defect_percentage, 10)\r\n        ),\r\n        backgroundColor: \"#5190dd\",\r\n        minBarLength: 15,\r\n      },\r\n    ],\r\n  };\r\n\r\n  // Chart Options\r\n  const options = {\r\n    responsive: true,\r\n    maintainAspectRatio: false,\r\n    plugins: {\r\n      legend: { display: false },\r\n      tooltip: {\r\n        callbacks: {\r\n          label: (tooltipItem) => `${tooltipItem.raw}M`,\r\n        },\r\n      },\r\n      datalabels: {\r\n        color: \"#ffff\",\r\n        font: {\r\n          size: productionData?.length > 15 ? 7 : 10,\r\n        },\r\n      },\r\n    },\r\n    scales: {\r\n      y: {\r\n        beginAtZero: true,\r\n        ticks: {\r\n          callback: (value) => `${value}M`,\r\n        },\r\n      },\r\n      x: {\r\n        grid: { display: false },\r\n        ticks: {\r\n          autoSkip: false,\r\n          maxRotation: 90,\r\n          minRotation: 45,\r\n        },\r\n      },\r\n    },\r\n  };\r\n\r\n\r\n\r\n  // Render: Total Defects Card\r\n  const renderTotalDefectsCard = () => (\r\n    <div className=\"p-3 mb-2 border-2 rounded-md bg-[#ffe0e2]\">\r\n      <div className=\"flex justify-between items-center mb-2\">\r\n        <span className=\"text-lg font-semibold\">Total Defects</span>\r\n      </div>\r\n      <div className=\"text-4xl font-semibold text-red-500\">{totalDefects}</div>\r\n    </div>\r\n  );\r\n\r\n  // Render: Defects by Type List\r\n  const renderDefectsList = () => (\r\n    <div className=\"p-2 border-1 rounded-md max-h-[350px] overflow-auto bg-[#D2D7E9]\">\r\n      <h2 className=\"text-lg mb-2 font-semibold text-[#4A5068]\">\r\n        Defects by Types\r\n      </h2>\r\n      <ul>\r\n        {(externalLoading || isLoading) ? (\r\n          <li className=\"flex justify-center p-2\">\r\n            <span className=\"max-w-28 text-wrap font-bold text-gray-500\">\r\n              Loading...\r\n            </span>\r\n          </li>\r\n        ) : (\r\n          Object.keys(categoryDefects || {}).map((category) => (\r\n            <li\r\n              key={category}\r\n              className=\"flex justify-between items-center bg-[#ff676e] p-2 mb-2 rounded\"\r\n            >\r\n              <span className=\"max-w-32 text-wrap font-bold break-words\">\r\n                {category}\r\n              </span>\r\n              <span className=\"font-bold\">{categoryDefects[category]}</span>\r\n            </li>\r\n          ))\r\n        )}\r\n      </ul>\r\n    </div>\r\n  );\r\n\r\n  // Render: Bar Chart\r\n  const renderBarChart = () => (\r\n    <div\r\n      className=\"bg-white py-3 px-1 rounded-md\"\r\n      style={{\r\n        width: productionData?.length * 5 + \"%\",\r\n        minWidth: \"100%\",\r\n        height: \"400px\",\r\n        display: \"flex\",\r\n        justifyContent: \"flex-start\",\r\n      }}\r\n    >\r\n      <Bar data={data} options={options} className=\"w-full\" />\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div className=\"py-4 px-0\">\r\n      <h1 className=\"section-title text-red-700 mb-4\">\r\n        <span className=\"section-title-overlay font-bold\">\r\n          Real-Time Manufacturing DPMU\r\n        </span>\r\n      </h1>\r\n      <div className=\"flex mb-4\">\r\n        {/* Left Panel */}\r\n        <div className=\"flex-grow mr-4 min-w-52 max-w-96\">\r\n          {renderTotalDefectsCard()}\r\n          {renderDefectsList()}\r\n        </div>\r\n\r\n        {/* Right Panel */}\r\n        <div className=\"flex w-[75%] bg-white rounded-md\">\r\n          { isLoading ? (\r\n            <div className=\"flex justify-center items-center w-full\">\r\n             <Spin size=\"large\"  tip=\"Loading\"/>\r\n            </div>\r\n          ) : productionData?.every((item) => item.defect_percentage === 0) ? (\r\n            <div className=\"flex justify-center items-center font-extrabold h-52 text-center w-full\">\r\n              NO DATA\r\n            </div>\r\n          ) : (\r\n            <div\r\n              style={{\r\n                width: \"100%\",\r\n                overflowX: productionData?.length > 15 ? \"auto\" : \"visible\",\r\n              }}\r\n            >\r\n              {renderBarChart()}\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nRealTimeManufacturingSection.propTypes = {\r\n  loading: PropTypes.bool,\r\n  categoryDefects: PropTypes.object,\r\n  productionData: PropTypes.array,\r\n};\r\n","import type { MouseEvent } from 'react';\nimport type {\n  ChartType,\n  ChartData,\n  DefaultDataPoint,\n  ChartDataset,\n  ChartOptions,\n  Chart,\n} from 'chart.js';\n\nimport type { ForwardedRef } from './types.js';\n\nconst defaultDatasetIdKey = 'label';\n\nexport function reforwardRef<T>(ref: ForwardedRef<T>, value: T) {\n  if (typeof ref === 'function') {\n    ref(value);\n  } else if (ref) {\n    ref.current = value;\n  }\n}\n\nexport function setOptions<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(chart: Chart<TType, TData, TLabel>, nextOptions: ChartOptions<TType>) {\n  const options = chart.options;\n\n  if (options && nextOptions) {\n    Object.assign(options, nextOptions);\n  }\n}\n\nexport function setLabels<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(\n  currentData: ChartData<TType, TData, TLabel>,\n  nextLabels: TLabel[] | undefined\n) {\n  currentData.labels = nextLabels;\n}\n\nexport function setDatasets<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(\n  currentData: ChartData<TType, TData, TLabel>,\n  nextDatasets: ChartDataset<TType, TData>[],\n  datasetIdKey = defaultDatasetIdKey\n) {\n  const addedDatasets: ChartDataset<TType, TData>[] = [];\n\n  currentData.datasets = nextDatasets.map(\n    (nextDataset: Record<string, unknown>) => {\n      // given the new set, find it's current match\n      const currentDataset = currentData.datasets.find(\n        (dataset: Record<string, unknown>) =>\n          dataset[datasetIdKey] === nextDataset[datasetIdKey]\n      );\n\n      // There is no original to update, so simply add new one\n      if (\n        !currentDataset ||\n        !nextDataset.data ||\n        addedDatasets.includes(currentDataset)\n      ) {\n        return { ...nextDataset } as ChartDataset<TType, TData>;\n      }\n\n      addedDatasets.push(currentDataset);\n\n      Object.assign(currentDataset, nextDataset);\n\n      return currentDataset;\n    }\n  );\n}\n\nexport function cloneData<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(data: ChartData<TType, TData, TLabel>, datasetIdKey = defaultDatasetIdKey) {\n  const nextData: ChartData<TType, TData, TLabel> = {\n    labels: [],\n    datasets: [],\n  };\n\n  setLabels(nextData, data.labels);\n  setDatasets(nextData, data.datasets, datasetIdKey);\n\n  return nextData;\n}\n\n/**\n * Get dataset from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */\nexport function getDatasetAtEvent(\n  chart: Chart,\n  event: MouseEvent<HTMLCanvasElement>\n) {\n  return chart.getElementsAtEventForMode(\n    event.nativeEvent,\n    'dataset',\n    { intersect: true },\n    false\n  );\n}\n\n/**\n * Get single dataset element from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */\nexport function getElementAtEvent(\n  chart: Chart,\n  event: MouseEvent<HTMLCanvasElement>\n) {\n  return chart.getElementsAtEventForMode(\n    event.nativeEvent,\n    'nearest',\n    { intersect: true },\n    false\n  );\n}\n\n/**\n * Get all dataset elements from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */\nexport function getElementsAtEvent(\n  chart: Chart,\n  event: MouseEvent<HTMLCanvasElement>\n) {\n  return chart.getElementsAtEventForMode(\n    event.nativeEvent,\n    'index',\n    { intersect: true },\n    false\n  );\n}\n","import React, { useEffect, useRef, forwardRef } from 'react';\nimport { Chart as ChartJS } from 'chart.js';\nimport type { ChartType, DefaultDataPoint } from 'chart.js';\n\nimport type { ForwardedRef, ChartProps, BaseChartComponent } from './types.js';\nimport {\n  reforwardRef,\n  cloneData,\n  setOptions,\n  setLabels,\n  setDatasets,\n} from './utils.js';\n\nfunction ChartComponent<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(\n  props: ChartProps<TType, TData, TLabel>,\n  ref: ForwardedRef<ChartJS<TType, TData, TLabel>>\n) {\n  const {\n    height = 150,\n    width = 300,\n    redraw = false,\n    datasetIdKey,\n    type,\n    data,\n    options,\n    plugins = [],\n    fallbackContent,\n    updateMode,\n    ...canvasProps\n  } = props as ChartProps;\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const chartRef = useRef<ChartJS | null>();\n\n  const renderChart = () => {\n    if (!canvasRef.current) return;\n\n    chartRef.current = new ChartJS(canvasRef.current, {\n      type,\n      data: cloneData(data, datasetIdKey),\n      options: options && { ...options },\n      plugins,\n    });\n\n    reforwardRef(ref, chartRef.current);\n  };\n\n  const destroyChart = () => {\n    reforwardRef(ref, null);\n\n    if (chartRef.current) {\n      chartRef.current.destroy();\n      chartRef.current = null;\n    }\n  };\n\n  useEffect(() => {\n    if (!redraw && chartRef.current && options) {\n      setOptions(chartRef.current, options);\n    }\n  }, [redraw, options]);\n\n  useEffect(() => {\n    if (!redraw && chartRef.current) {\n      setLabels(chartRef.current.config.data, data.labels);\n    }\n  }, [redraw, data.labels]);\n\n  useEffect(() => {\n    if (!redraw && chartRef.current && data.datasets) {\n      setDatasets(chartRef.current.config.data, data.datasets, datasetIdKey);\n    }\n  }, [redraw, data.datasets]);\n\n  useEffect(() => {\n    if (!chartRef.current) return;\n\n    if (redraw) {\n      destroyChart();\n      setTimeout(renderChart);\n    } else {\n      chartRef.current.update(updateMode);\n    }\n  }, [redraw, options, data.labels, data.datasets, updateMode]);\n\n  useEffect(() => {\n    if (!chartRef.current) return;\n\n    destroyChart();\n    setTimeout(renderChart);\n  }, [type]);\n\n  useEffect(() => {\n    renderChart();\n\n    return () => destroyChart();\n  }, []);\n\n  return (\n    <canvas\n      ref={canvasRef}\n      role='img'\n      height={height}\n      width={width}\n      {...canvasProps}\n    >\n      {fallbackContent}\n    </canvas>\n  );\n}\n\nexport const Chart = forwardRef(ChartComponent) as BaseChartComponent;\n","import React, { forwardRef } from 'react';\nimport {\n  Chart as ChartJS,\n  LineController,\n  BarController,\n  RadarController,\n  DoughnutController,\n  PolarAreaController,\n  BubbleController,\n  PieController,\n  ScatterController,\n} from 'chart.js';\nimport type { ChartType, ChartComponentLike } from 'chart.js';\n\nimport type {\n  ChartProps,\n  ChartJSOrUndefined,\n  TypedChartComponent,\n} from './types.js';\nimport { Chart } from './chart.js';\n\nfunction createTypedChart<T extends ChartType>(\n  type: T,\n  registerables: ChartComponentLike\n) {\n  ChartJS.register(registerables);\n\n  return forwardRef<ChartJSOrUndefined<T>, Omit<ChartProps<T>, 'type'>>(\n    (props, ref) => <Chart {...props} ref={ref} type={type} />\n  ) as TypedChartComponent<T>;\n}\n\nexport const Line = /* #__PURE__ */ createTypedChart('line', LineController);\n\nexport const Bar = /* #__PURE__ */ createTypedChart('bar', BarController);\n\nexport const Radar = /* #__PURE__ */ createTypedChart('radar', RadarController);\n\nexport const Doughnut = /* #__PURE__ */ createTypedChart(\n  'doughnut',\n  DoughnutController\n);\n\nexport const PolarArea = /* #__PURE__ */ createTypedChart(\n  'polarArea',\n  PolarAreaController\n);\n\nexport const Bubble = /* #__PURE__ */ createTypedChart(\n  'bubble',\n  BubbleController\n);\n\nexport const Pie = /* #__PURE__ */ createTypedChart('pie', PieController);\n\nexport const Scatter = /* #__PURE__ */ createTypedChart(\n  'scatter',\n  ScatterController\n);\n"],"names":["RealTimeManufacturingSection","_ref","loading","externalLoading","categoryDefects","productionData","useDispatch","isLoading","setIsLoading","useState","useEffect","timeout","setTimeout","clearTimeout","totalDefects","Object","values","reduce","total","count","data","labels","map","item","date_time","datasets","label","parseInt","defect_percentage","backgroundColor","minBarLength","options","responsive","maintainAspectRatio","plugins","legend","display","tooltip","callbacks","tooltipItem","concat","raw","datalabels","color","font","size","length","scales","y","beginAtZero","ticks","callback","value","x","grid","autoSkip","maxRotation","minRotation","_jsxs","className","children","_jsx","keys","category","Spin","tip","every","style","width","overflowX","minWidth","height","justifyContent","Bar","defaultDatasetIdKey","reforwardRef","ref","current","setLabels","currentData","nextLabels","setDatasets","nextDatasets","datasetIdKey","arguments","addedDatasets","nextDataset","currentDataset","find","dataset","includes","push","assign","cloneData","nextData","ChartComponent","props","redraw","type","fallbackContent","updateMode","canvasProps","canvasRef","useRef","chartRef","renderChart","Chart$1","destroyChart","destroy","chart","nextOptions","setOptions","config","update","React","role","Chart","forwardRef","createTypedChart","registerables","register","BarController"],"sourceRoot":""}